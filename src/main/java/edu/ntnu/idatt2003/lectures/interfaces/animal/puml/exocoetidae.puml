@startuml

interface Moveable {
  canMove(): boolean;
}

 abstract class Animal implements Moveable {
  - noOfLegs : int {readOnly};
  # Animal(int noOfLegs);
  + canMove(): boolean;
  + getNoOfLegs(): int;
}

interface Flyable extends Moveable {
  canFly(): boolean;
}

interface Swimable extends Moveable {
  canSwim(): boolean;
}

interface Walkable extends Moveable {
  canWalk() : boolean;
}

interface Comparable<T> {
  +compareTo(o : T) : int
}

class Fish {
  -name : String
  +Fish(name : String)
  +canEat() : boolean
  +canSwim() : boolean
  +getName() : String
  +toString() : String
  +hashCode() : int
  +equals(obj : Object) : boolean
  +compareTo(a : Animal) : int
}

Fish --|> Animal
Fish ..|> Comparable
Fish ..|> Swimable
Fish ..|> Eatable

class Exocoetidae {
  -name : String
  +Exocoetidae(name : String)
  +canEat() : boolean
  +canSwim() : boolean
  +canFly() : boolean
  +getName() : String
  +toString() : String
  +hashCode() : int
  +equals(obj : Object) : boolean
  +compareTo(a : Animal) : int
}

Exocoetidae --|> Fish
Exocoetidae ..|> Comparable
Exocoetidae ..|> Swimable
Exocoetidae ..|> Flyable
Exocoetidae ..|> Eatable


@enduml